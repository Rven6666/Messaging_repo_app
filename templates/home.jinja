<!-- 
    Here you'll find the main exhibit: the chat application code. Feel free to look around!
-->
{% extends 'base.jinja' %}


{% block content %}
<style>
    nav {
        border-bottom: 1px solid black;
        overflow: auto;
    }

    #whole_app {
        width: 800px;
        /* Set the width of the centered div */
        margin: 0 auto;
        /* Set margin-left and margin-right to auto */
    }

    #message_box_container,
    #user_boxes,
    #friend_boxes {
        display: inline-block;
        vertical-align: top;
        margin-left: 10px;
        margin-right: 10px;
    }

    #chat_box,
    #input_box {
        vertical-align: top;
        margin-top: 10px;
        margin-right: 10px;
    }

    #message_box,
    #friend_list,
    #user_list,
    #request_sent,
    #request_recieved {
        border-radius: 8px;
        border: 1px solid black;
        overflow: auto;
        padding: 2px;
        box-sizing: border-box;
    }

    #message_box {
        width: 60%;
        height: 400px;
        min-width: 300px;
        max-width: 800px;
    }

    #friend_name {
        min-width: 110px;
    }

    #friend_list,
    #user_list,
    #request_sent,
    #request_recieved {
        width: 30%;
        height: 180px;
        min-width: 160px;
        max-width: 200px;
        margin-bottom: 10px;
    }

    #receiver {
        width: 60%;
        min-width: 245px;
        max-width: 800px;
    }

    .box_size {
        width: 100px;
    }

    .text {
        margin-top: 2px;
        margin-bottom: 2px;
    }

    .space {
        margin-top: 22px;
    }
</style>

<!--Navbar, you'll see the username here-->
<nav style="border-bottom: 1px solid black;">
    <ol style="float: right">
        <li style="display:inline-block">Username: {{ username }} </li>
    </ol>
</nav>

<main>
    <div id="whole_app">
        <h1>Messaging App </h1>
        <div id="message_box_container">
            Chat box
            <section id="message_box"></section>
            <section id="chat_box">
                <p class="text">Chat with: </p>
                <input id="receiver" placeholder="username">
                <!-- MDN says its bad practice to use the onclick attribute,
        but we're using it anyways coz its easy :)-->
                <button onclick="get_val_joinRoom()">Chat</button>
            </section>
            <section id="input_box" style="display: none">
                <p class="text">Message: </p>
                <input id="message" placeholder="message">
                <button onclick="send()">Send</button>
                <button onclick="leave()">Leave Room</button>
            </section>
        </div>
        <div id="user_boxes">
            Friends List:
            <section id="friend_list"></section>
            <div class="space"></div>
            Online users
            <section id="user_list">
                {% for user in connected_users %}
                <div class="user">
                    <p>{{ user.username }}</p> <!-- Display the username -->
                </div>
                {% endfor %}
            </section>
            <section id="add_friend">
                <p class="text">Send friend request:</p>
                <input id="friend_name" class="box_size" placeholder="username">
                <button onclick="addFriend()">Add</button>
            </section>
        </div>
        <!--Friends request boxes--->
        <div id="friend_boxes">
            Requests sent to:
            <section id="request_sent"></section>
            <div class="space"></div>
            Requests recieved from:
            <section id="request_recieved"></section>
        </div>
</main>

<script src="/static/js/libs/socket.io.min.js"></script>
<script>


    let room_id = 0;

    // when the user presses the "Enter" key inside of the "message box", 
    // the message is sent to the server
    $("#message").on("keyup", (e) => {
        if (e.key == "Enter") {
            send();
        }
    })

    // when the user presses the enter key inside of the "receiver box"
    // the user joins a (socket) room
    $("#receiver").on("keyup", (e) => {
        if (e.key == "Enter") {
            get_val_joinRoom();
        }
    })

    $("#friend_name").on("keyup", (e) => {
        if (e.key == "Enter") {
            addFriend();
        }
    })


    //Remove eventlistener for the friends request system. - links to whole message box
    $("#request_sent").on("click", ".cancel-button", function () {
        let sender = "{{ username }}";
        let button_name = $(this).data("friend-name");
        $(this).parent().remove(); // Remove the parent <p> element
        remove_request(sender, button_name);
    });

    //reject eventlistener for recieved friends requests. - links to whole message box
    $("#request_recieved").on("click", ".reject-button", function () {
        let currUser = "{{ username }}";
        let requ_sender = $(this).data("curr_sender");
        $(this).parent().remove(); // Remove the parent <p> element
        remove_request(requ_sender, currUser);
    });

    //Accept eventlistener for Accept friends. - links to whole message box
    $("#request_recieved").on("click", ".accept-button", function () {
        let currUser = "{{ username }}";
        let requ_sender = $(this).data("curr_sender");
        $(this).parent().remove(); // Remove the parent <p> element
        friends(currUser, requ_sender);
    });

    //Accept eventlistener for removing friends. - links to whole message box
    $("#friend_list").on("click", ".remove_friend_button", function () {
        let currUser = "{{ username }}";
        let friend = $(this).data("friend-name");
        console.log(currUser, friend);
        $(this).parent().remove(); // Remove the parent <p> element
        remove_friends(currUser, friend);
    });


    //Accept eventlistener for removing friends. - links to whole message box
    $("#friend_list").on("click", ".join_chat_button", function () {
        // Call the join_room() function when the button is clicked
        var name = $(this).data("friend-name")
        console.log("event dheck accept", $(this).data("friend-name"))
        join_room(name);
    });



    $(document).ready(() => {
        // room_id is undefined if the user hasn't joined a room
        // we early return in this case
        if (Cookies.get("room_id") == undefined) {
            return;
        }

        // the user has already joined an existing room
        // we'll display the message box, instead of the "Chat with: " box
        $("#chat_box").hide();
        $("#input_box").show();
        room_id = parseInt(Cookies.get("room_id"));
    })

    // Here's the Socket IO part of the code
    // things get a bit complicated here so brace yourselves :P
    let username = "{{ username }}";

    Cookies.set('username', username);

    // initializes the socket
    const socket = io();

    // an incoming message arrives, we'll add the message to the message box
    socket.on("incoming", (msg, color = "black") => {
        add_message(msg, color);
    })

    // we'll send the message to the server by emitting a "send" event
    function send() {
        let message = $("#message").val();
        $("#message").val("");
        socket.emit("send", username, message, room_id);
    }

    function get_val_joinRoom() {
        let receiver = $("#receiver").val();
        console.log("get val", receiver)
        join_room(receiver)
    }

    // we emit a join room event to the server to join a room
    function join_room(reciv) {

        // pass in the receiver of our message to the server
        // as well as the current user's username
        socket.emit("join", username, reciv, (res) => {
            // res is a string with the error message if the error occurs
            // this is a pretty bad way of doing error handling, but watevs
            if (typeof res != "number") {
                alert(res);
                return;
            }

            // set the room id variable to the room id returned by the server
            room_id = res;
            Cookies.set("room_id", room_id);

            // now we'll show the input box, so the user can input their message
            $("#chat_box").hide();
            $("#input_box").show();
        });

    }

    // function when the user clicks on "Leave Room"
    // emits a "leave" event, telling the server that we want to leave the room
    function leave() {
        Cookies.remove("room_id");
        socket.emit("leave", username, room_id);
        $("#input_box").hide();
        $("#chat_box").show();
    }

    // function to add a message to the message box
    // called when an incoming message has reached a client
    function add_message(message, color) {
        let box = $("#message_box");
        let child = $(`<p style="color:${color}; margin: 0px;"></p>`).text(message);
        box.append(child);
    }

    //Logic to add new friend request to database
    function addFriend() {
        var token = $('meta[name="csrf-token"]').attr('content');
        let sender = "{{ username }}";
        var friend = $("#friend_name").val();
        let sent_matchFound = false;
        let friendsAlready = false;
        // Check if the input field is not empty
        if (friend.trim() !== "") {
            let sent_box = $("#request_sent");
            let friend_box = $("#friend_list");

            // CEHKS IF FRIENDS REQUEST HAS BEEN SENT 
            sent_box.children('p').each(function () {
                let ele_text = $(this).text();
                //checks for duplicate requests.
                console.log(ele_text, friend.trim())
                if (ele_text.trim() === (friend.trim() + "Cancel")) {
                    sent_matchFound = true;
                    return;
                } else {
                    console.log("no duplicate freind requests found")
                    sent_matchFound = false;
                }
            });

            // CHECKS IF FRIENDS ALREADY BEFORE REQUEST
            friend_box.children('p').each(function () {
                let frien_ele_text = $(this).text();
                //checks for duplicate requests.
                console.log(frien_ele_text, friend.trim())
                if (frien_ele_text.trim() === (friend.trim() + "Chatx")) {
                    friendsAlready = true;
                    return;
                } else {
                    console.log("no duplicate freind requests found")
                    friendsAlready = false;
                }
            });


            if (sent_matchFound) {
                alert(`Invalid selection - try again.`);
                console.log("duplicate request found. Exiting function call.")
                return; // if duplicate request is true exit function
            }
            if (friendsAlready) {
                alert(`You are already friends.`);
                console.log("request failed, already friends.")
                return; // if duplicate request is true exit function
            }


            addUserRequest(sender, friend);

            // Send friend request to the server
            $.ajax({
                type: "POST",
                url: "/friend_request",
                data: { csrf_token: token, friend: friend, username: "{{ username }}" },
                success: function (response) {
                    console.log("Friend request sent to server:", response);
                },
                error: function (xhr, status, error) {
                    console.error("Error sending friend request:", error);
                }
            });
        } else {
            alert("No user input, try again.")
        }
        matchFound = false;
        friendsAlready = false;
    }

    //Adds friends requests to friends request UI.
    function addUserRequest(sender, friend) {
        let sent_box = $("#request_sent");
        let child = $("<p style='color: black; margin: 0px; text-align: right;'></p>").text(friend);
        let cancel_button = $("<button>").text("Cancel").addClass("cancel-button").data("friend-name", friend);

        cancel_button.css({
            "margin-left": "5px",
            "margin-top": "2px",
            "margin-bottom": "2px",
            "margin-right": "2px"
        });

        child.append(cancel_button);
        sent_box.append(child);

    }

    // Univerisal show user requests on any page reload/change of users
    function show_requests_sent() {
        let sender = "{{ username }}";
        {% for request in requests %}
        friend = "{{ request }}";
        addUserRequest(sender, friend);
        {% endfor %}
    }

    //removes friends sending and recieveing from database
    function remove_request(sender, friend) {
        // Remove child element and cancel_button
        console.log("Sender:", sender)
        console.log("Reciever", friend)

        // Send AJAX request to delete the request from the server
        $.ajax({
            type: "POST",
            url: "/delete_request",
            data: { csrf_token: token, csrf_token: token, friend: friend, username: sender },
            success: function (response) {
                console.log("Request successfully deleted", response);
            },
            error: function (xhr, status, error) {
                console.error("Error in deleting request", error);
            }
        });
    }

    function show_recieved() {
        let receivedBox = $("#request_recieved");
        let sender = "{{ username }}";
        // Iterate over each sender in the matches list
        {% for sender in matches %}
        (function () { // enclosure for values
            let currentSender = "{{ sender }}"; // Extract the sender from the template
            let currentChild = $("<p style='color: black; margin: 0px; text-align: right;'></p>").text(currentSender);
            let RejectButton = $("<button>").text("x").addClass("reject-button").data("curr_sender", currentSender);
            let AcceptButton = $("<button>").text("\u2714").addClass("accept-button").data("curr_sender", currentSender);

            RejectButton.css, AcceptButton.css({
                "margin-left": "5px",
                "margin-top": "2px",
                "margin-bottom": "2px",
                "margin-right": "2px"
            });

            currentChild.append(AcceptButton);
            currentChild.append(RejectButton);
            receivedBox.append(currentChild);
        })();
        {% endfor %}
    }

    function friends(friend1, friend2) {
        $.ajax({
            type: "POST",
            url: "/friends_list",
            data: { friend1: friend1, friend2: friend2 },
            success: function (response) {
                console.log("Friend request sent to server:", response);
            },
            error: function (xhr, status, error) {
                console.error("Error sending friend request:", error);
            }
        });
        remove_request(friend2, friend1);
        append_new_friend(friend2);

    }

    function append_new_friend(newFriend) {
        let sent_box = $("#friend_list");
        let child = $("<p style='color: black; margin: 0px; text-align: right;'></p>").text(newFriend);
        let removeFriendButton = $("<button>").text("x").addClass("remove_friend_button").data("friend-name", newFriend);
        let joinChatButton = $("<button>").text("Chat").addClass("join_chat_button").data("friend-name", newFriend);

        // Define a CSS class
        let buttonStyle = {
            "margin-left": "5px",
            "margin-top": "2px",
            "margin-bottom": "2px",
            "margin-right": "2px"
        };

        // Apply the CSS class to both buttons
        removeFriendButton.css(buttonStyle);
        joinChatButton.css(buttonStyle);

        child.append(joinChatButton);
        // Append the removeFriendButton to the child element
        child.append(removeFriendButton);
        sent_box.append(child);

    }

    function show_all_friends() {
        let friend_box = $("#friend_list");
        let friend = "null";
        var token = $('meta[name="csrf-token"]').attr('content');

        // Iterate over each relation in the friendsList
        {% for relation in friendsList %}
        friend = "{{ relation }}";
        console.log("showing freinds", friend.trim());

        (function () {
            // Create a closure to capture the current value of friend
            let child = $("<p style='color: black; margin: 0px; text-align: right;'></p>").text(friend);
            let removeFriendButton = $("<button>").text("x").addClass("remove_friend_button").data("friend-name", friend);
            let joinChatButton = $("<button>").text("Chat").addClass("join_chat_button").data("friend-name", friend);

            // Define a CSS class
            let buttonStyle = {
                "margin-left": "5px",
                "margin-top": "2px",
                "margin-bottom": "2px",
                "margin-right": "2px"
            };

            // Apply the CSS class to both buttons
            removeFriendButton.css(buttonStyle);
            joinChatButton.css(buttonStyle);

            child.append(joinChatButton);
            // Append the removeFriendButton to the child element
            child.append(removeFriendButton);

            // Append the child element to the friend_box
            friend_box.append(child);
        })();
        {% endfor %}
    }

    function remove_friends(user, friend) {
        // Send AJAX request to delete the request from the server
        $.ajax({
            type: "POST",
            url: "/remove_friends",
            data: { csrf_token: token, user: user, friend: friend },
            success: function (response) {
                console.log("Friend successfully removed", response);
            },
            error: function (xhr, status, error) {
                console.error("Error in deleting friend", error);
            }
        });

    }

    function show_online() {
        let sender = "{{ username }}";
        let online_box = $("#user_list");
        let friend = "null";
        let sent_matchFound = false;
        let friendsAlready = false;

        // Iterate over each relation in the friendsList
        {% for user in connected_users %}
        friend = "{{ user.username }}"
        console.log("showing online users", friend.trim());

        (function () {
            // Create a closure to capture the current value of friend
            let child = $("<p style='color: black; margin: 0px; text-align: right;'></p>").text(friend);
            let send_request = $("<button>").text("Add").addClass("online_friend_request").data("friend-name", friend);

            // Define a CSS class
            let buttonStyle = {
                "margin-left": "5px",
                "margin-top": "2px",
                "margin-bottom": "2px",
                "margin-right": "2px"
            };

            // Apply the CSS class to both buttons
            send_request.css(buttonStyle);

            child.append(send_request);
            // Append the send_request to the child element
            child.append(send_request);

            // Append the child element to the online_box
            online_box.append(child);

            // Attach click event listener to the button
            send_request.on("click", function () {
                let sent_box = $("#request_sent");
                let friend_box = $("#friend_list");

                // CEHKS IF FRIENDS REQUEST HAS BEEN SENT 
                sent_box.children('p').each(function () {
                    let ele_text = $(this).text();
                    //checks for duplicate requests.
                    console.log(ele_text, friend.trim())
                    if (ele_text.trim() === (friend.trim() + "Cancel")) {
                        sent_matchFound = true;
                        return;
                    } else {
                        console.log("no duplicate freind requests found")
                        sent_matchFound = false;
                    }
                });

                // CHECKS IF FRIENDS ALREADY BEFORE REQUEST
                friend_box.children('p').each(function () {
                    let frien_ele_text = $(this).text();
                    //checks for duplicate requests.
                    console.log(frien_ele_text, friend.trim())
                    if (frien_ele_text.trim() === (friend.trim() + "Chatx")) {
                        friendsAlready = true;
                        return;
                    } else {
                        console.log("no duplicate freind requests found")
                        friendsAlready = false;
                    }
                });


                if (sent_matchFound) {
                    alert(`Invalid selection - try again.`);
                    console.log("duplicate request found. Exiting function call.")
                    return; // if duplicate request is true exit function
                }
                if (friendsAlready) {
                    alert(`You are already friends.`);
                    console.log("request failed, already friends.")
                    return; // if duplicate request is true exit function
                }


                addUserRequest(sender, friend);

                // Send friend request to the server
                $.ajax({
                    type: "POST",
                    url: "/friend_request",
                    data: { friend: friend, username: "{{ username }}" },
                    success: function (response) {
                        console.log("Friend request sent to server:", response);
                    },
                    error: function (xhr, status, error) {
                        console.error("Error sending friend request:", error);
                    }
                });
            });


        })(friend);


        {% endfor %}
    }

    $(document).ready(function () {
        // Call the function to load names and buttons
        show_recieved();
        show_requests_sent()
        show_all_friends();
        show_online()
    });


</script>
{% endblock %}