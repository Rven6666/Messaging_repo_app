<!-- 
    Here you'll find the main exhibit: the chat application code. Feel free to look around!
-->
{% extends 'base.jinja' %}


{% block content %}
<style>
    nav {
        border-bottom: 1px solid black;
        overflow: auto;
    }

    #whole_app {
        width: 800px;
        /* Set the width of the centered div */
        margin: 0 auto;
        /* Set margin-left and margin-right to auto */
    }

    #message_box_container,
    #user_boxes,
    #friend_boxes {
        display: inline-block;
        vertical-align: top;
        margin-left: 10px;
        margin-right: 10px;
    }

    #chat_box,
    #input_box {
        vertical-align: top;
        margin-top: 10px;
        margin-right: 10px;
    }

    #message_box,
    #friend_list,
    #user_list,
    #request_sent,
    #request_recieved {
        border-radius: 8px;
        border: 1px solid black;
        overflow: auto;
        padding: 2px;
        box-sizing: border-box;
    }

    #message_box {
        width: 60%;
        height: 400px;
        min-width: 300px;
        max-width: 800px;
    }

    #friend_list,
    #user_list,
    #request_sent,
    #request_recieved {
        width: 30%;
        height: 180px;
        min-width: 160px;
        max-width: 200px;
        margin-bottom: 10px;
    }

    #receiver {
        width: 60%;
        min-width: 245px;
        max-width: 800px;
    }

    .box_size {
        width: 100px;
    }

    .text {
        margin-top: 2px;
        margin-bottom: 2px;
    }

    .space {
        margin-top: 22px;
    }
</style>

<!--Navbar, you'll see the username here-->
<nav style="border-bottom: 1px solid black;">
    <ol style="float: right">
        <li style="display:inline-block">Username: {{ username }} </li>
    </ol>
</nav>

<main>
    <div id="whole_app">
        <h1>Messaging App </h1>
        <div id="message_box_container">
            Chat box
            <section id="message_box"></section>
            <section id="chat_box">
                <p class="text">Chat with: </p>
                <input id="receiver" placeholder="username">
                <!-- MDN says its bad practice to use the onclick attribute,
        but we're using it anyways coz its easy :)-->
                <button onclick="join_room()">Chat</button>
            </section>
            <section id="input_box" style="display: none">
                <p class="text">Message: </p>
                <input id="message" placeholder="message">
                <button onclick="send()">Send</button>
                <button onclick="leave()">Leave Room</button>
            </section>
        </div>
        <div id="user_boxes">
            Friends list
            <section id="friend_list"></section>
            <div class="space"></div>
            Online users
            <section id="user_list"></section>
            <section id="add_friend">
                <p class="text">Add or Remove Friend:</p>
                <input id="add_friend" class="box_size" placeholder="username">
                <!--- FIX THIS BUTTON TO WORK WITH FRIENDS LIST-------------------------------->
                <button onclick="addFriend()">+</button>
                <button onclick=">removeFriend()">-</button>
            </section>
        </div>
        <div id="friend_boxes">
            Requests sent:
            <section id="request_sent"></section>
            <div class="space"></div>
            Requests recieved:
            <section id="request_recieved"></section>
        </div>
</main>

<script src="/static/js/libs/socket.io.min.js"></script>
<script>
    let room_id = 0;

    // when the user presses the "Enter" key inside of the "message box", 
    // the message is sent to the server
    $("#message").on("keyup", (e) => {
        if (e.key == "Enter") {
            send();
        }
    })

    // when the user presses the enter key inside of the "receiver box"
    // the user joins a (socket) room
    $("#receiver").on("keyup", (e) => {
        if (e.key == "Enter") {
            join_room();
        }
    })


    $(document).ready(() => {
        // room_id is undefined if the user hasn't joined a room
        // we early return in this case
        if (Cookies.get("room_id") == undefined) {
            return;
        }

        // the user has already joined an existing room
        // we'll display the message box, instead of the "Chat with: " box
        $("#chat_box").hide();
        $("#input_box").show();
        room_id = parseInt(Cookies.get("room_id"));
    })

    // Here's the Socket IO part of the code
    // things get a bit complicated here so brace yourselves :P
    let username = "{{ username }}";

    Cookies.set('username', username);

    // initializes the socket
    const socket = io();

    // an incoming message arrives, we'll add the message to the message box
    socket.on("incoming", (msg, color = "black") => {
        add_message(msg, color);
    })

    // we'll send the message to the server by emitting a "send" event
    function send() {
        let message = $("#message").val();
        $("#message").val("");
        socket.emit("send", username, message, room_id);
    }

    // we emit a join room event to the server to join a room
    function join_room() {

        let receiver = $("#receiver").val();

        // pass in the receiver of our message to the server
        // as well as the current user's username
        socket.emit("join", username, receiver, (res) => {
            // res is a string with the error message if the error occurs
            // this is a pretty bad way of doing error handling, but watevs
            if (typeof res != "number") {
                alert(res);
                return;
            }

            // set the room id variable to the room id returned by the server
            room_id = res;
            Cookies.set("room_id", room_id);

            // now we'll show the input box, so the user can input their message
            $("#chat_box").hide();
            $("#input_box").show();
        });

    }

    // function when the user clicks on "Leave Room"
    // emits a "leave" event, telling the server that we want to leave the room
    function leave() {
        Cookies.remove("room_id");
        socket.emit("leave", username, room_id);
        $("#input_box").hide();
        $("#chat_box").show();
    }

    // function to add a message to the message box
    // called when an incoming message has reached a client
    function add_message(message, color) {
        let box = $("#message_box");
        let child = $(`<p style="color:${color}; margin: 0px;"></p>`).text(message);
        box.append(child);
    }

</script>
{% endblock %}